# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "elpigraph" %}
{% set version = load_setup_py_data().get('version') %}
#{% set version = "0.1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  git_rev: master
  git_url: https://github.com/j-bac/elpigraph.git
  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/j-bac/elpigraph-python/releases/download/{{ version }}/elpigraph-python-{{ version }}.tar.gz

  # and otherwise fall back to archive: 
  #url: https://github.com/simplejson/elpigraph-python/archive/master.tar.gz
  
  #sha256: d58439c548433adcda98e695be53e526ba940a4b9c44fb9a05d92cd495cdd47f
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . --no-deps -vv"
requirements:
  host:
    - python
    - pip
  run:
    - python
    - numpy >=1.16.2
    - pandas >=0.23.4
    - numba >=0.49.1 
    - scikit-learn >=0.21.3
    - scipy >=1.2.0
    - python-igraph >=0.7.1
    - matplotlib


test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - elpigraph
#    - simplejson.tests

about:
  home: https://github.com/j-bac/elpigraph
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: GPL-3.0
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE
  summary: 'Elastic Principal Graphs algorithm (ElPiGraph) for Python'

  # The remaining entries in this section are optional, but recommended.
  description: |
    elpigraph is a package implementing the Elastic Principal Graphs algorithm for manifold learning.
  #doc_url: https://simplejson.readthedocs.io/
  #dev_url: https://github.com/simplejson/simplejson

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - j-bac
    - auranic
